// Package cve provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package cve

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// CveReport defines model for cve-report.
type CveReport struct {
	Report *struct {
		// Matches Vulnerability matches
		Matches *[]struct {
			Cve      *string `json:"cve,omitempty"`
			Fixstate *string `json:"fixstate,omitempty"`
			Package  *string `json:"package,omitempty"`
			Severity *string `json:"severity,omitempty"`
			Version  *string `json:"version,omitempty"`
		} `json:"matches,omitempty"`
	} `json:"report,omitempty"`
}

// CveRequest defines model for cve-request.
type CveRequest struct {
	// Digest Image/OS digest
	Digest string `json:"digest"`

	// InputType Input Type
	// 1) image: The input consists of the image
	// 2) sbom: The input consists of the sbom file
	InputType string `json:"inputType"`

	// Name Image/OS name
	Name     string              `json:"name"`
	SbomFile *openapi_types.File `json:"sbomFile,omitempty"`
}

// CveUuids defines model for cve-uuids.
type CveUuids struct {
	// Uuids CVE UUIDs
	Uuids *[]struct {
		Digest    string `json:"digest"`
		Name      string `json:"name"`
		Timestamp string `json:"timestamp"`
		Uuid      string `json:"uuid"`
	} `json:"uuids,omitempty"`
}

// GetApiV1CveReportsParams defines parameters for GetApiV1CveReports.
type GetApiV1CveReportsParams struct {
	// Name Image/OS Name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Digest Image digest, (no value) to get list of all CVE scan UUIDs for the given image/os name, optionally filtered by app
	Digest *string `form:"digest,omitempty" json:"digest,omitempty"`
}

// PostApiV1CveReportsMultipartRequestBody defines body for PostApiV1CveReports for multipart/form-data ContentType.
type PostApiV1CveReportsMultipartRequestBody = CveRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/cve-reports)
	GetApiV1CveReports(ctx echo.Context, params GetApiV1CveReportsParams) error

	// (POST /api/v1/cve-reports)
	PostApiV1CveReports(ctx echo.Context) error

	// (GET /api/v1/cve-reports/{uuid})
	GetApiV1CveReportsUuid(ctx echo.Context, uuid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiV1CveReports converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1CveReports(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1CveReportsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "digest" -------------

	err = runtime.BindQueryParameter("form", true, false, "digest", ctx.QueryParams(), &params.Digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiV1CveReports(ctx, params)
	return err
}

// PostApiV1CveReports converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1CveReports(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiV1CveReports(ctx)
	return err
}

// GetApiV1CveReportsUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1CveReportsUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiV1CveReportsUuid(ctx, uuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/cve-reports", wrapper.GetApiV1CveReports)
	router.POST(baseURL+"/api/v1/cve-reports", wrapper.PostApiV1CveReports)
	router.GET(baseURL+"/api/v1/cve-reports/:uuid", wrapper.GetApiV1CveReportsUuid)

}
